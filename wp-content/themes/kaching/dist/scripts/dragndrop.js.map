{"version":3,"sources":["../assets/scripts/file-upload/jquery.fileupload.js"],"names":["factory","define","amd","exports","require","jQuery","$","defaults","className","text","previewImage","value","classes","main","enter","reject","accept","focus","validators","maxSize","width","maxWidth","minWidth","height","maxHeight","minHeight","init","leave","format","filename","ezdz","element","options","this","settings","extend","$input","self","is","isBrowserCompatible","$ezdz","$container","on","addClass","isFunction","apply","removeClass","leaved","wrap","before","parent","data","preview","file","files","basename","name","replace","extension","split","pop","formatted","allowed","attr","accepted","valid","errors","mimeType","types","each","i","type","trim","indexOf","a","b","val","reader","FileReader","readAsDataURL","onload","e","isImage","img","Image","target","result","src","setTimeout","size","find","remove","css","background-image","html","prototype","path","callback","fadeIn","onerror","destroy","replaceWith","off","removeData","container","window","File","FileList","fn","plugin","args","arguments","Array","slice","call","error"],"mappings":"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","file":"dragndrop.js","sourcesContent":["/* ----------------------------------------------------------------------------\n// Ezdz [izy-dizy]\n// Licensed under the MIT license.\n// http://github.com/jaysalvat/ezdz/\n// ----------------------------------------------------------------------------\n// Copyright (C) 2014 Jay Salvat\n// http://jaysalvat.com/\n// --------------------------------------------------------------------------*/\n\n/* global define: true, require: true, jQuery */\n\n(function (factory) {\n    \"use strict\";\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n}(function ($) {\n    \"use strict\";\n\n    // Default settings\n    var defaults = {\n        className:     '',\n        text:          '<i class=\"icon-ic-upload\"></i><br><br>Simply drag and drop image file<br> or <span>browse</span> on your disc.',\n        previewImage:  true,\n        value:         null,\n        classes: {\n            main:      'ezdz-dropzone',\n            enter:     'ezdz-enter',\n            reject:    'ezdz-reject',\n            accept:    'ezdz-accept',\n            focus:     'ezdz-focus'\n        },\n        validators: {\n            maxSize:   null,\n            width:     null,\n            maxWidth:  null,\n            minWidth:  null,\n            height:    null,\n            maxHeight: null,\n            minHeight: null\n        },\n        init:   function() {},\n        enter:  function() {},\n        leave:  function() {},\n        reject: function() {},\n        accept: function() {},\n        format: function(filename) {\n            return filename;\n        }\n    };\n\n    // Main plugin\n    $.ezdz = function(element, options) {\n        this.settings = $.extend(true, {}, defaults, $.ezdz.defaults, options);\n        this.$input   = $(element);\n        var self      = this,\n            settings  = self.settings,\n            $input    = self.$input;\n\n        if (!$input.is('input[type=\"file\"]')) {\n            return;\n        }\n\n        // Stop if not compatible with HTML5 file API\n        if (!$.ezdz.isBrowserCompatible()) {\n            return;\n        }\n\n        // private: Init the plugin\n        var init = function() {\n            var $ezdz, $container, value;\n\n            // Build the container\n            $container = $('<div class=\"' + settings.classes.main + '\" />')\n\n            .on('dragover.ezdz', function() {\n                $(this).addClass(settings.classes.enter);\n\n                if ($.isFunction(settings.enter)) {\n                     settings.enter.apply(this);\n                }\n            })\n\n            .on('dragleave.ezdz', function() {\n                $(this).removeClass(settings.classes.enter);\n\n                if ($.isFunction(settings.leaved)) {\n                    settings.leaved.apply(this);\n                }\n            })\n\n            .addClass(settings.className);\n\n            // Build the whole dropzone\n            $input\n                .wrap($container)\n                .before('<div>' + settings.text + '</div>');\n\n            $ezdz = $input.parent('.' + settings.classes.main);\n\n            // Preview a file at start if it's defined\n            value = settings.value || $input.data('value');\n\n            if (value) {\n                self.preview(value);\n            }\n\n            // Trigger the init callback\n            if ($.isFunction(settings.init)) {\n                 settings.init.apply($input, [ value ]);\n            }\n\n            // Events on the input\n            $input\n\n            .on('focus.ezdz', function() {\n                $ezdz.addClass(settings.classes.focus);\n            })\n\n            .on('blur.ezdz', function() {\n                $ezdz.removeClass(settings.classes.focus);\n            })\n\n            .on('change.ezdz', function() {\n                var file = this.files[0];\n\n                // No file, so user has cancelled\n                if (!file) {\n                    return;\n                }\n\n                // Info about the dropped or selected file\n                var basename  = file.name.replace(/\\\\/g,'/').replace( /.*\\//, ''),\n                    extension = file.name.split('.').pop(),\n                    formatted = settings.format(basename);\n\n                file.extension = extension;\n\n                // Mime-Types\n                var allowed  = $input.attr('accept'),\n                    accepted = false,\n                    valid    = true,\n                    errors   = {\n                        'mimeType':  false,\n                        'maxSize':   false,\n                        'width':     false,\n                        'minWidth':  false,\n                        'maxWidth':  false,\n                        'height':    false,\n                        'minHeight': false,\n                        'maxHeight': false\n                    };\n\n                // Check the accepted Mime-Types from the input file\n                if (allowed) {\n                    var types = allowed.split(/[,|]/);\n\n                    $.each(types, function(i, type) {\n                        type = $.trim(type);\n\n                        if ('.' + extension === type) {\n                            accepted = true;\n                            return false;\n                        }\n\n                        if (file.type === type) {\n                            accepted = true;\n                            return false;\n                        }\n\n                        // Mime-Type with wildcards ex. image/*\n                        if (type.indexOf('/*') !== false) {\n                            var a = type.replace('/*', ''),\n                                b = file.type.replace(/(\\/.*)$/g, '');\n\n                            if (a === b) {\n                                accepted = true;\n                                return false;\n                            }\n                        }\n                    });\n\n                    if (accepted === false) {\n                        errors.mimeType = true;\n                    }\n                } else {\n                    accepted = true;\n                }\n\n                // Reset the accepted / rejected classes\n                $ezdz.removeClass(settings.classes.reject + ' ' + settings.classes.accept);\n\n                // If the Mime-Type is not accepted\n                if (accepted !== true) {\n                    $input.val('');\n\n                    $ezdz.addClass(settings.classes.reject);\n\n                    // Trigger the reject callback\n                    if ($.isFunction(settings.reject)) {\n                         settings.reject.apply($input, [ file, errors ]);\n                    }\n                    return false;\n                }\n\n                // Read the added file\n                var reader = new FileReader(file);\n\n                reader.readAsDataURL(file);\n\n                reader.onload = function(e) {\n                    var img = new Image(),\n                        isImage;\n\n                    file.data = e.target.result;\n                    img.src   = file.data;\n\n                    setTimeout(function() {\n                        isImage = (img.width && img.height);\n\n                        // Validator\n                        if (settings.validators.maxSize && file.size > settings.validators.maxSize) {\n                            valid = false;\n                            errors.maxSize = true;\n                        }\n\n                        if (isImage) {\n                            file.width  = img.width;\n                            file.height = img.height;\n\n                            if (settings.validators.width && img.width !== settings.validators.width) {\n                                valid = false;\n                                errors.width = true;\n                            }\n\n                            if (settings.validators.maxWidth && img.width > settings.validators.maxWidth) {\n                                valid = false;\n                                errors.maxWidth = true;\n                            }\n\n                            if (settings.validators.minWidth && img.width < settings.validators.minWidth) {\n                                valid = false;\n                                errors.minWidth = true;\n                            }\n\n                            if (settings.validators.height && img.height !== settings.validators.height) {\n                                valid = false;\n                                errors.height = true;\n                            }\n\n                            if (settings.validators.maxHeight && img.height > settings.validators.maxHeight) {\n                                valid = false;\n                                errors.maxHeight = true;\n                            }\n\n                            if (settings.validators.minHeight && img.height < settings.validators.minHeight) {\n                                valid = false;\n                                errors.minHeight = true;\n                            }\n                        }\n\n                        // The file is validated, so added to input\n                        if (valid === true) {\n                            $ezdz.find('img').remove();\n\n                            if (isImage && settings.previewImage === true) {\n                                // $ezdz.find('div').html($(img).fadeIn());\n                                $ezdz.find('div').addClass('active');\n                                $ezdz.css({\n                                    'background-image': 'url(' + img.src + ')',\n\n                                });\n                            } else {\n                                $ezdz.find('div').html('<span>' + formatted + '</span>');\n                            }\n\n                            $ezdz.addClass(settings.classes.accept);\n\n                            // Trigger the accept callback\n                            if ($.isFunction(settings.accept)) {\n                                 settings.accept.apply($input, [ file ]);\n                            }\n                        // The file is invalidated, so rejected\n                        } else {\n                            $input.val('');\n\n                            $ezdz.addClass(settings.classes.reject);\n\n                            // Trigger the reject callback\n                            if ($.isFunction(settings.reject)) {\n                                 settings.reject.apply($input, [ file, errors ]);\n                            }\n                        }\n                    }, 250);\n                };\n            });\n        };\n\n        init();\n    };\n\n    // Inject a file or image in the preview\n    $.ezdz.prototype.preview = function(path, callback) {\n        var settings  = this.settings,\n            $input    = this.$input,\n            $ezdz     = $input.parent('.' + settings.classes.main),\n            basename  = path.replace(/\\\\/g,'/').replace( /.*\\//, ''),\n            formatted = settings.format(basename);\n\n        var img = new Image();\n        img.src = path;\n\n        // Is an image\n        img.onload = function() {\n            $ezdz.find('div').html($(img).fadeIn());\n\n            if ($.isFunction(callback)) {\n                 callback.apply(this);\n            }\n        };\n\n        // Is not an image\n        img.onerror = function() {\n            $ezdz.find('div').html('<span>' + formatted + '</span>');\n\n            if ($.isFunction(callback)) {\n                 callback.apply(this);\n            }\n        };\n\n        $ezdz.addClass(settings.classes.accept);\n    };\n\n    // Destroy ezdz\n    $.ezdz.prototype.destroy = function() {\n        var settings = this.settings,\n            $input   = this.$input;\n\n        $input.parent('.' + settings.classes.main).replaceWith($input);\n        $input.off('*.ezdz');\n        $input.removeData('ezdz');\n    };\n\n    // Extend settings\n    $.ezdz.prototype.options = function(options) {\n        var settings = this.settings;\n\n        if (!options) {\n            return settings;\n        }\n\n        $.extend(true, this.settings, options);\n    };\n\n    // Get input container\n    $.ezdz.prototype.container = function() {\n        var settings = this.settings,\n            $input   = this.$input;\n\n        return $input.parent('.' + settings.classes.main);\n    };\n\n    // Is browser compatible\n    $.ezdz.isBrowserCompatible = function() {\n        return !!(window.File && window.FileList && window.FileReader);\n    };\n\n    // Default options\n    $.ezdz.defaults = defaults;\n\n    // jQuery plugin\n    $.fn.ezdz = function(options) {\n        var args = arguments,\n            plugin;\n\n        return this.each(function () {\n            plugin = $(this).data('ezdz');\n\n            if (!plugin) {\n                return $(this).data('ezdz', new $.ezdz(this, options));\n            } if (plugin[options]) {\n                return plugin[options].apply(plugin, Array.prototype.slice.call(args, 1));\n            } else {\n                $.error('Ezdz error - Method ' +  options + ' does not exist.');\n            }\n        });\n    };\n}));\n"],"sourceRoot":"assets/scripts/"}